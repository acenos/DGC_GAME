package net.dgcgame;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;

import javax.microedition.khronos.opengles.GL10;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.opengl.GLUtils;
import android.util.Log;

// TODO: Sacar de aqui las texturas
// TODO: Buscar una forma de añadir texturas de forma dinamica



public class Grid {
	private int filtro = 0; // Proximidad de textura
	private int numTexturas = 0;
	private int limitTextures = 5;
	private int numFig = 1;
	public Casilla[][] Casillas;
	private FloatBuffer _vertexBuffer;
	private ShortBuffer _gridBuffer;
	
	public int altura, anchura;
    private IntBuffer _indicesTextures[];
    private FloatBuffer _texturesBuffer;
    float coords[];
    private final static float iTexturas[] = new float[] 
	{
		0, 0,
		1, 0,
		0, 1,
		1, 1,
	};
    
	public Grid(int h, int w)
    {
		altura = h;
		anchura = w;
		_indicesTextures = new IntBuffer[limitTextures];
		coords = new float[altura*anchura*3];
    	for(int i=0; i<altura; i++)
    	{
    		for(int j=0; j<anchura; j++)
    		{
	    		coords[(i*anchura+j)*3]   = j*2-anchura+1;
	    		coords[(i*anchura+j)*3+1] = 1;
	    		coords[(i*anchura+j)*3+2] = -(i+2)*2;
    		}
    	}
    	
    	// Inicializamos el buffer de vŽrtices (intersecciones del grid)
	    //ByteBuffer vbb = ByteBuffer.allocateDirect(4*coords.length);
	    //vbb.order(ByteOrder.nativeOrder());
	    //_vertexBuffer = vbb.asFloatBuffer();
	    //for(int i=0; i<coords.length; i++)
	    //{
	    //	_vertexBuffer.put(i, coords[i]);
	    //}
	    
	    
	    float[] vertex = new float[18];
	    float[] indexTex = new float[6];
	    Casillas = new Casilla[altura][anchura];
    	for(int i=0; i<altura-1; i++)
    	{
    		for(int j=0; j<anchura-1; j++)
    		{
    			/*
    			vertex[((anchura-1)*i + j)*6] 		 = coords[anchura*i+j];
    			vertex[((anchura-1)*i + j)*6+1] 	 = coords[anchura*i+j+1];
    			vertex[((anchura-1)*i + j)*6+2] 	 = coords[anchura*(i+1)+j];

    			vertex[((anchura-1)*i + j)*6+3] 	 = coords[anchura*(i+1)+j];
    			vertex[((anchura-1)*i + j)*6+4] 	 = coords[anchura*i+j+1];
    			vertex[((anchura-1)*i + j)*6+5] 	 = coords[anchura*(i+1)+j+1];
    			*/
    			
    			vertex[0] 		= coords[(anchura*i+j)*3];
    			vertex[1] 		= coords[(anchura*i+j)*3+1];
    			vertex[2] 		= coords[(anchura*i+j)*3+2];
    			
    			vertex[3]		= coords[(anchura*i+j+1)*3];
    			vertex[4]		= coords[(anchura*i+j+1)*3+1];
    			vertex[5]		= coords[(anchura*i+j+1)*3+2];
    			
    			vertex[6]		= coords[(anchura*(i+1)+j)*3];
    			vertex[7]		= coords[(anchura*(i+1)+j)*3+1];
    			vertex[8]		= coords[(anchura*(i+1)+j)*3+2];
    			
    			vertex[9]		= coords[(anchura*(i+1)+j)*3];
    			vertex[10]		= coords[(anchura*(i+1)+j)*3+1];
    			vertex[11]		= coords[(anchura*(i+1)+j)*3+2];
    			
    			vertex[12]		= coords[(anchura*i+j+1)*3];
    			vertex[13]		= coords[(anchura*i+j+1)*3+1];
    			vertex[14]		= coords[(anchura*i+j+1)*3+2];
    			
    			vertex[15]		= coords[(anchura*(i+1)+j+1)*3];
    			vertex[16]		= coords[(anchura*(i+1)+j+1)*3+1];
    			vertex[17]		= coords[(anchura*(i+1)+j+1)*3+2];
    			
    			indexTex[0] = iTexturas[(int)(((anchura-1)*i + j)*6)%4];
    			indexTex[1] = iTexturas[(int)(((anchura-1)*i + j)*6+1)%4];
    			indexTex[2] = iTexturas[(int)(((anchura-1)*i + j)*6+2)%4];
    			indexTex[3] = iTexturas[(int)(((anchura-1)*i + j)*6+3)%4];
    			indexTex[4] = iTexturas[(int)(((anchura-1)*i + j)*6+4)%4];
    			indexTex[5] = iTexturas[(int)(((anchura-1)*i + j)*6+5)%4];
    			
    			Log.v("dgcgame","Grid::Coordenada-> : "+ vertex);
    			
    			Casillas[i][j] = new Casilla(vertex,indexTex,0);
    		}
    	}
    	String temp = new String();
    	for(int i = 0; i < coords.length; i++) temp += coords[i] + ",";
    	Log.v("dgcgame","Coordenadas: " + temp);
    	ByteBuffer vbb = ByteBuffer.allocateDirect(4*vertex.length);
	    vbb.order(ByteOrder.nativeOrder());
	    _vertexBuffer = vbb.asFloatBuffer();
	    _vertexBuffer.put(vertex);
	    
    	vbb = ByteBuffer.allocateDirect(4*indexTex.length);
	    vbb.order(ByteOrder.nativeOrder());
	    _texturesBuffer = vbb.asFloatBuffer();
	    _texturesBuffer.put(indexTex);
    	//num_index = index.length;
	    initSubGridBuffer();

    }
	
	private void initSubGridBuffer()
	{
		short[] grid = new short[(anchura+altura)*2];
	    int k=0;
    	for(int i=0; i<altura; i++)
    	{
    		grid[k] = (short) (i*anchura);
    		grid[k+1] = (short) ((i+1)*anchura-1);
    		k+=2;
    	}
    	for(int i=0; i<anchura; i++)
    	{
    		grid[k] = (short) i;
    		grid[k+1] = (short) ((altura-1)*anchura+i);
    		k+=2;
    	}
    	// Inicializamos el buffer del grid
	    ByteBuffer igb = ByteBuffer.allocateDirect(4*grid.length);
	    igb.order(ByteOrder.nativeOrder());
	    _gridBuffer = igb.asShortBuffer();
	    for(int i=0; i<grid.length; i++)
	    {
	    	_gridBuffer.put(i, grid[i]);
	    }
		
	}
	public int loadTexture(GL10 gl, Context context, int id) {
    	// loading texture
		Log.v("dgcgame","Grid::loadTexture: Iniciando");
    	Bitmap texture = BitmapFactory.decodeResource(context.getResources(), id);
    	Log.v("dgcgame","Grid::loadTexture: Bitmap Creado");
    	gl.glEnable(GL10.GL_TEXTURE_2D);
    	Log.v("dgcgame","Grid::loadTexture: GL_TEXTURE_2D activado");
    	// generate one texture pointer
    	_indicesTextures[numTexturas] = IntBuffer.allocate(3);
    	gl.glGenTextures(3, _indicesTextures[numTexturas]);
    	Log.v("dgcgame","Grid::loadTexture: Puntero generado");
    	
    	// setup texture 0
        gl.glBindTexture(GL10.GL_TEXTURE_2D, _indicesTextures[numTexturas].get(0));
        gl.glTexParameterx(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_NEAREST);
        gl.glTexParameterx(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
        gl.glTexParameterx(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S, GL10.GL_CLAMP_TO_EDGE);
        gl.glTexParameterx(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T, GL10.GL_CLAMP_TO_EDGE);
        GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, texture, 0);
        Log.v("dgcgame","Grid::loadTexture: Textura 0 creada");
        
        // setup texture 1
        gl.glBindTexture(GL10.GL_TEXTURE_2D, _indicesTextures[numTexturas].get(1));
        gl.glTexParameterx(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
        gl.glTexParameterx(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_LINEAR);
        gl.glTexParameterx(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S, GL10.GL_CLAMP_TO_EDGE);
        gl.glTexParameterx(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T, GL10.GL_CLAMP_TO_EDGE);
        GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, texture, 0);
        Log.v("dgcgame","Grid::loadTexture: Textura 1 creada");
        
        // setup texture 2
        gl.glBindTexture(GL10.GL_TEXTURE_2D, _indicesTextures[numTexturas].get(2));
        gl.glTexParameterx(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
        gl.glTexParameterx(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_LINEAR_MIPMAP_NEAREST);
        gl.glTexParameterx(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S, GL10.GL_CLAMP_TO_EDGE);
        gl.glTexParameterx(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T, GL10.GL_CLAMP_TO_EDGE);
        GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, texture, 0);
        
        Utils.generateMipmapsForBoundTexture(texture);
        Log.v("dgcgame","Grid::loadTexture: Textura 2 creada");
        /*// ...and bind it to our array
    	
    	gl.glBindTexture(GL10.GL_TEXTURE_2D, _texturesBuffer[0]);

    	// create nearest filtered texture
    	gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
    	gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);

    	// Use Android GLUtils to specify a two-dimensional texture image from our bitmap
    	GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, bitmap, 0);
		*/
    	// Clean up
    	texture.recycle();
    	numTexturas++;
    	return (numTexturas-1);
    }
	
	public void draw(GL10 gl)
	{
		for(int i=0; i<altura-1; i++)
    	{
    		for(int j=0; j<anchura-1; j++)
    		{
    			//Log.v("dgcgame","Grid::draw-> Dibujando casilla "+i+", "+j+" Textura :"+Casillas[i][j].Textura);
    			gl.glBindTexture(GL10.GL_TEXTURE_2D, _indicesTextures[Casillas[i][j].Textura].get(filtro));
    			Casillas[i][j].draw(gl);
    		}
    	}
		/*
		gl.glBindTexture(GL10.GL_TEXTURE_2D, _indicesTextures[0].get(filtro));
		
		gl.glEnableClientState(GL10.GL_VERTEX_ARRAY); // para poder leer de buffer
		gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
        
		gl.glVertexPointer(3, GL10.GL_FLOAT, 0, _vertexBuffer);
		gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, _texturesBuffer);
       //gl.glDrawElements(GL10.GL_TRIANGLES, num_index, GL10.GL_UNSIGNED_SHORT, _indexBuffer);
        gl.glDrawArrays(GL10.GL_TRIANGLES, 0, coords.length);
        //gl.glColor4f(0f, 0f, 0f, 0.5f);
        //gl.glDrawElements(GL10.GL_LINES, (anchura+altura)*2, GL10.GL_UNSIGNED_SHORT, _gridBuffer);
        
        gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
        gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
        */
	}
}
